{"root":{"data":{"id":"e3e903edc3a7","created":1478175234,"text":"海量数据存储"},"children":[{"data":{"id":"b8apegt8woow","created":1478175270795,"text":"大数据概述","layout":null,"expandState":"collapse"},"children":[{"data":{"id":"b8c8ujz8720w","created":1478331692558,"text":"大数据的属性","note":"大量化、快速化、多样化、价值化","layout":null},"children":[]},{"data":{"id":"b8c8vhqzsrkg","created":1478331766071,"text":"大数据的组成","note":"10%结构化数据和90%非结构化数据","layout":null},"children":[]},{"data":{"id":"b8c8w7cjdtkw","created":1478331821793,"text":"大数据分析的基础","note":"云计算与大数据处理平台 ","layout":null},"children":[]},{"data":{"id":"b8c8wle1v9c0","created":1478331852360,"text":"大数据关键技术","note":"大数据计算模式|解决问题\n-|-|\n批处理计算|针对大规模数据的批量处理\n流计算|针对流数据的实时计算\n图计算|针对大规模图结构数据的处理\n查询分析计算|大规模数据的存储管理和查询分析","layout":null},"children":[]},{"data":{"id":"b8c90vios2wo","created":1478332187864,"text":"云计算服务","note":"云计算实现了通过网络提供可伸缩的、廉价的分布式计算能力，用户只需要在具备网络接入的地方，就可以随时随地获得所需的各种IT资源","layout":null},"children":[]},{"data":{"id":"b8c91zjlq0ow","created":1478332274991,"text":"云","note":"公有云，私有云，混合云\n应用层：软件即服务 （SaaS）\n平台层：平台即服务（PaaS）\n基础设施层：基础设施即服务（IaaS）","layout":null},"children":[]}]},{"data":{"id":"b8apenf4ir4s","created":1478175285178,"text":"虚拟化与大数据处理架构","layout":null,"expandState":"collapse"},"children":[{"data":{"id":"b8c93u5npq80","created":1478332419992,"text":"虚拟化","note":null,"expandState":"expand","layout":null},"children":[{"data":{"id":"b8c98u9us1kw","created":1478332812067,"text":"定义","note":"计算、存储、网络等资源的一种逻辑表示，并不拘泥于这些资源的实现方式、物理包装和物理位置等限制","layout":null},"children":[]},{"data":{"id":"b8c93al4xbsw","created":1478332377393,"text":"云计算等于","note":"虚拟化+自动化+服务管理+编排化","expandState":"expand","layout":null},"children":[]},{"data":{"id":"b8c9563kr7s4","created":1478332524352,"text":"虚拟化技术","note":"虚拟化技术和并行计算、分布式计算、网格计算等的发展促进了云计算技术的产生和发展","layout":null},"children":[]},{"data":{"id":"b8c95tfyo3k0","created":1478332575167,"text":"虚拟化技术分类","note":"虚拟化类型|虚拟化目标对象|所处位置\n-|-|-|\n指令集架构级虚拟化|指令集|指令集架构级\n硬件抽象层虚拟化|计算机的各种硬件|应用层\n操作系统层虚拟化|操作系统|本地操作系统内核\n编辑语言层虚拟化|应用层的部分功能|应用层\n库函数层虚拟化|应用级库函数的接口|应用层","layout":null},"children":[]}]},{"data":{"id":"b8c991o0d7cc","created":1478332828160,"text":"大数据处理架构——Hadoop","layout":null},"children":[{"data":{"id":"b8c9d5qpx2ww","created":1478333150488,"text":"构成","note":"由HDFS、MapReduce和YARN三个分支构成\nHDFS:NN Federation、HA\nMapReduce:运行在YARN上的MR","layout":null},"children":[]},{"data":{"id":"b8c9eeh4v54o","created":1478333247863,"text":"Google File System(GFS)","layout":null},"children":[{"data":{"id":"b8c9f4msg5s8","created":1478333304802,"text":"组成","note":"Client(客户端)：应用程序的访问接口\nMaster（主服务器）：管理节点，逻辑上只有一个，保存系统的元数据库，负责整个文件系统的管理\nChunk Server（数据块服务器）：负责具体的存储工作，数据以文件的形式存储在Chunk Server上","layout":null},"children":[]},{"data":{"id":"b8c9gxk1uz48","created":1478333446127,"text":"实现机制","note":"-客户端首先访问Master节点，获取交互的Chunk Server信息，然后访问这些Chunk Server，完成数据存储工作。这种设计方法实现了控制流和数据流的分离\n-Client与Master之间只有控制流，而无数据流，极大降低了Master的负载\n-Client与Chunk Server之间直接传输数据流，同时由于文件被分成多个Chunk进行分布式存储，Client可以同时访问多个Chunk Server，从而使整个I/O系统的高度并行，系统整体性能得到提高","layout":null},"children":[]},{"data":{"id":"b8c9k8ag09kc","created":1478333704583,"text":"容错","note":"采用副本方式实现Chunk Server容错\n-每一个Chunk有多个存储副本（一般为三个），分布存储在不同的Chunk Server上，用户态的GFS不会影响Chunk Server的稳定性","layout":null},"children":[]}]}]}]},{"data":{"id":"b8apexhp8jcw","created":1478175307102,"text":"HDFS分布式文件系统","layout":null,"expandState":"collapse"},"children":[{"data":{"id":"b8c9njenbn4s","created":1478333963874,"text":"定义","note":"HDFS是一种典型的主从式的分布式文件系统，该文件系统完全仿造Google的GFS文件系统而设计的","layout":null},"children":[]},{"data":{"id":"b8c9on4f6aok","created":1478334050327,"text":"优点和局限性","note":null,"layout":null},"children":[]},{"data":{"id":"b8c9plyj7egw","created":1478334126159,"text":"存储","note":"HDFS默认一个存储是64MB，一个文件被分为多个块，以块作为存储单位，块的大小远远大于普通文件系统，可以最小化寻址开销\n-支持大规模文件存储\n-简化系统设计\n-适合数据备份","layout":null},"children":[]},{"data":{"id":"b8c9qznt95sg","created":1478334234350,"text":"主要组件的功能（NameNode和DataNode）","note":"NameNode|DataNode\n-|-|\n存储元数据|存储文件内容\n元数据保存在内存中|文件内容保存在磁盘\n保存文件，block，datanode之间的映射关系|维护了block id和datanode本地文件的映射关系","layout":null},"children":[]},{"data":{"id":"b8c9tgdt0f4g","created":1478334427478,"text":"体系结构","note":"HDFS采用了主从（Master/Slave）的结构模型，一个HDFS包括一个名称节点（NameNode）和多个数据节点（DataNode）\nNameNode负责管理分布式文件系统的命名空间（Namespace），保存了两个核心的数据结构，即Fslmage和EditLog","layout":null},"children":[]},{"data":{"id":"b8c9vgv0clc0","created":1478334585247,"text":"局限性","note":"HDFS只设置了唯一一个名称节点，这样大大简化了系统设计，但也带来了一些局限性：\n1.命名空间的限制：名称节点是保存在内存中的，因此，名称节点能容纳的对象（文件、块）个数会受到内存大小的限制\n2.性能的瓶颈：整个分布式系统的吞吐量，受制于单个名称节点的吞吐量\n3.隔离问题：由于集群中只有一个名称节点，只有一个命名空间，因此，无法对不同的应用程序进行隔离\n4.集群的可用性：一旦这个唯一的名称节点发生故障，会导致整个集群变得不可用","layout":null},"children":[]}]},{"data":{"id":"b8apf721z2wc","created":1478175327923,"text":"NoSQL与HBase分布式数据库","layout":null,"expandState":"expand"},"children":[{"data":{"id":"b8ca7qvy5y8g","created":1478335547441,"text":"NoSQL","expandState":"expand","layout":null},"children":[{"data":{"id":"b8c9z01q8d4c","created":1478334862104,"text":"出现背景","note":"关系型数据库已经不能满足海量数据存储需求","layout":null},"children":[]},{"data":{"id":"b8c9zej94lk4","created":1478334893639,"text":"NoSQL与关系数据库的优劣势","layout":null},"children":[]},{"data":{"id":"b8c9znza3fcc","created":1478334914199,"text":"应用情景","note":"关系数据库：电信、银行等领域的关键业务系统，需要保证强事务的一致性\nNoSQL：互联网企业、传统企业的非关键业务","layout":null},"children":[]},{"data":{"id":"b8ca16qcdm0o","created":1478335033382,"text":"三大基石","note":"一个分布式系统不能同时满足一致性、可用性和分区容忍性这三个需求，最多只能同时满足其中两个","expandState":"collapse","layout":null},"children":[{"data":{"id":"b8ca1neo5c84","created":1478335069681,"text":"CAP","note":"C（Consistency）:一致性\nA（Availability）：可用性\nP（Tolerance of Network Partition）：分区容忍性","layout":null},"children":[]},{"data":{"id":"b8ca1pscv4wg","created":1478335074862,"text":"最终一致性","layout":null},"children":[]},{"data":{"id":"b8ca1rjumhkc","created":1478335078702,"text":"BASE","layout":null},"children":[]}]},{"data":{"id":"b8ca4ix5e8wk","created":1478335295007,"text":"分类","note":"键值数据库、列族数据库、文档数据库和图形数据库","layout":null},"children":[]}]},{"data":{"id":"b8ca85ndb7k0","created":1478335579574,"text":"云数据库","note":"部署和虚拟化在云计算环境中的数据库","layout":null},"children":[{"data":{"id":"b8ca8pfqj4wg","created":1478335622648,"text":"特性","note":"1.动态扩展性\n2.高可用性\n3.较低的使用代价\n4.易用性\n5.高性能\n6.免维护\n7.安全","layout":null},"children":[]},{"data":{"id":"b8ca9qjv4lc0","created":1478335703439,"text":"数据库选择","note":"对于一些大型企业，目前通常采用自建数据库 \n对于一些财力有限的中小企业而言，IT预算比较有限，云 数据库这种前期零投入、后期免维护的数据库服务，可以很好满足它们的需求","layout":null},"children":[]}]},{"data":{"id":"b8caa5as90gg","created":1478335735542,"text":"HBase","layout":null},"children":[{"data":{"id":"b8caab70rhcg","created":1478335748375,"text":"定义","note":"HBase是一个高可靠、高性能、面向列、可伸缩的分布式数据库，是谷歌BigTable的开源实现","layout":null},"children":[]},{"data":{"id":"b8caan6l3vso","created":1478335774470,"text":"与传统数据库的区别","note":"1. 数据类型：关系数据库采用关系模型，具有丰富的数据类型和存储方式，HBase则采用了更加简单的数据模型，它把数据存储为未经解释的字符串\n2. 数据操作：关系数据库中包含了丰富的操作，其中会涉及复杂的多表连接。HBase操作则不存在复杂的表与表之间的关系，只有简单的插入、查询、删除、清空等，因为HBase在设计上就避免了复杂的表和表之间的关系\n3. 存储模式：关系数据库是基于行模式存储的。HBase是基于列存储的，每个列族都由几个文件保存，不同列族的文件是分离的\n4. 数据索引：关系数据库通常可以针对不同列构建复杂的多个索引，以提高数据访问性能。HBase只有一个索引——行键，通过巧妙的设计，HBase中的所有访问方法，或者通过行键访问，或者通过行键扫描，从而使得整个系统不会慢下来\n5. 数据维护：在关系数据库中，更新操作会用最新的当前值去替换记录中原来的旧值，旧值被覆盖后就不会存在。而在HBase中执行更新操作时，并不会删除数据旧的版本，而是生成一个新的版本，旧有的版本仍然保留\n6. 可伸缩性：关系数据库很难实现横向扩展，纵向扩展的空间也比较有限。相反，HBase和BigTable分布式数据库就是为了实现灵活的水平扩展而开发的，能够轻易地通过在集群中增加或者减少硬件数量来实现性能的伸缩","layout":null},"children":[]},{"data":{"id":"b8caccg9g4gk","created":1478335907839,"text":"数据模型","note":"- 表：HBase采用表来组织数据，表由行 和列组成，列划分为若干个列族\n- 行：每个HBase表都由若干行组成，每 个行由行键（row key）来标识。\n- 列族：一个HBase表被分组成许多“列 族”（Column Family）的集合，它是 基本的访问控制单元\n- 列限定符：列族里的数据通过列限定 符（或列）来定位\n- 时间戳：每个单元格都保存着同一份数据的多个版本，这些版本采用时间 戳进行索引\n- 单元格：在HBase表中，通过行、列 族和列限定符确定一个“单元格”（ cell），单元格中存储的数据没有数 据类型，总被视为字节数组byte[]","layout":null},"children":[]},{"data":{"id":"b8cadesbzsow","created":1478335991286,"text":"系统架构","note":"1. 客户端\n▫ 客户端包含访问HBase的接口，同时在缓存中维护着已经访问过的Region位置信息，用来加快后续数据访问过程\n2. Zookeeper服务器\n▫ Zookeeper可以帮助选举出一个Master作为集群的总管，并保证在任何时刻总有唯一一个Master在运行，这就避免了Master的“单点失效”问题\n3. 主服务器Master主要负责表和Region的管理工作：\n–管理用户对表的增加、删除、修改、查询等操作\n–实现不同Region服务器之间的负载均衡\n–在Region分裂或合并后，负责重新调整Region的分布\n–对发生故障失效的Region服务器上的Region进行迁移 \n4. Region服务器\n–Region服务器是HBase中最核心的模块，负责维护分配给自己的Region，并响应用户的读写请求","layout":null},"children":[]}]}]},{"data":{"id":"b8apfl9j7ncw","created":1478175358851,"text":"MapReduce分布式计算","layout":null},"children":[]},{"data":{"id":"b8apfs1rv3ks","created":1478175373619,"text":"Spark分布式内存计算","layout":null},"children":[]},{"data":{"id":"b8apfyj13mgc","created":1478175387723,"text":"Storm流式大数据处理","layout":null},"children":[]},{"data":{"id":"b8apg5q8il4c","created":1478175403396,"text":"基于Hadoop的数据仓库HIVE","layout":null},"children":[]}]},"template":"default","theme":"fresh-blue","version":"1.4.41"}